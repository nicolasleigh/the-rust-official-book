fn main() {
    let v: Vec<i32> = Vec::new();
    let v = vec![2, 3, 4];
    let mut v = Vec::new();
    v.push(1);
    v.push(2);

    let v = vec![1, 2, 3, 4, 5];
    let third = &v[2];
    println!("The third element is {third}");
    let third = v.get(20);
    match third {
        Some(third) => println!("The third element is {third}"),
        None => println!("There is no third element."),
    }

    // because vectors put the values next to each other in memory,
    // adding a new element onto the end of the vector might require allocating new memory and
    // copying the old elements to the new space, if there isn’t enough room to
    // put all the elements next to each other where the vector is currently stored.
    // In that case, the reference to the first element would be pointing to deallocated memory.
    // The borrowing rules prevent programs from ending up in that situation.
    let mut v = vec![1, 2, 3, 4, 5];
    // let first = &v[0]; // immutable borrow
    // v.push(6); // cannot borrow `v` as mutable because it is also borrowed as immutable
    // println!("The first element is: {first}");

    let v = vec![100, 32, 57];
    for i in &v {
        println!("{i}");
    }

    let mut v = vec![100, 32, 57];
    for i in &mut v {
        *i += 50;
    }

    // Using an Enum to Store Multiple Types
    enum SpreadsheetCell {
        Int(i32),
        Float(f64),
        Text(String),
    }
    let row = vec![
        SpreadsheetCell::Int(3),
        SpreadsheetCell::Text(String::from("blue")),
        SpreadsheetCell::Float(10.12),
    ];

    // Creating a new, empty String
    let mut s = String::new();

    // Using the `to_string` method to create a `String` from a string literal
    let data = "initial contents";
    let s = data.to_string();
    // the method also works on a literal directly:
    let s = "initial contents".to_string();

    // Using the `String::from` function to create a `String` from a string literal
    let s = String::from("initial contents");

    // Appending a string slice to a `String` using the `push_str` method
    let mut s = String::from("foo");
    s.push_str("bar");

    // Using the `+` operator to combine two `String` values into a new `String` value
    let s1 = String::from("Hello, ");
    let s2 = String::from("world!");
    let s3 = s1 + &s2; // note s1 has been moved here and can no longer be used

    // For combining strings in more complicated ways, we can instead use the `format!` macro
    // The code generated by the `format!` macro uses references so that this call doesn’t take ownership of any of its parameters.
    let s1 = String::from("tic");
    let s2 = String::from("tac");
    let s3 = String::from("toe");
    let s = format!("{s1}-{s2}-{s3}");

    // Methods for Iterating Over Strings
    for c in "你好".chars() {
        println!("c: {c}");
    }
    for b in "你好".bytes() {
        println!("b: {b}");
    }

    // Creating a new hash map and inserting some keys and values
    use std::collections::HashMap;
    let mut scores = HashMap::new();
    scores.insert(String::from("Blue"), 10);
    scores.insert(String::from("Yellow"), 50);

    // Accessing Values in a Hash Map
    let team_name = String::from("Blue");
    let score = scores.get(&team_name).copied().unwrap_or(0);

    // Iterate over each key–value pair in a hash map
    for (key, value) in &scores {
        println!("{key}: {value}");
    }

    // keys and values are owned by the hash map once they’re inserted
    let field_name = String::from("Favorite color");
    let field_value = String::from("Blue");
    let mut map = HashMap::new();
    map.insert(field_name, field_value);
    // `field_name` and `field_value` are invalid at this point, try using them and
    // see what compiler error you get!

    // Using the `entry` method to only insert if the key does not already have a value
    let mut scores = HashMap::new();
    scores.insert(String::from("Blue"), 10);
    scores.entry(String::from("Yellow")).or_insert(50);
    scores.entry(String::from("Blue")).or_insert(50);
    println!("{scores:?}");

    // Counting occurrences of words using a hash map that stores words and counts
    let text = "hello world wonderful world";
    let mut map = HashMap::new();
    for word in text.split_whitespace() {
        let count = map.entry(word).or_insert(0);
        *count += 1;
    }
    println!("{map:?}");
}
